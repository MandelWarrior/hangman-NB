{"version":3,"sources":["components/Letter.js","components/Word.js","components/AsciiBox.js","components/Hangman.js","components/GameOver.js","components/Win.js","components/Title.js","components/Keyboard.js","OneGame.js","App.js","serviceWorker.js","index.js"],"names":["Letter","props","state","hidden","className","this","letter","setState","Component","Word","letters","i","instance","splice","length","word","forEach","char","index","push","ref","setLetterRef","bind","key","setHidden","l","AsciiBox","lines","map","line","Hangman","style","fontSize","graphs","lives","GameOver","game_over","Win","game_win","Title","title","Keyboard","disabledButtons","Container","fluid","Col","row","Row","Button","disabled","includes","onClick","onKeyPressed","remove","OneGame","toUpperCase","rawWord","str","setFrom","setTo","newStr","indexOf","stringTranslate","usedLetters","hiddenLetters","indices","every","h","App","playing","game","loadWords","then","newGame","fetch","method","headers","response","arrayBuffer","buffer","decoder","TextDecoder","text","decode","words","split","Math","floor","random","keyboard","enableAll","hideAllLetters","k","disableKey","revealLetter","setLetterHidden","lose","didLose","win","didWin","showAllLetters","keyboardPressed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mwbAmBeA,EAjBf,kDAEE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,QAAQ,GAFL,EAFrB,qDASI,OAAO,yBAAKC,UAAU,cAAcC,KAAKH,MAAMC,OAAS,IAAME,KAAKJ,MAAMK,UAT7E,gCAYYJ,GACRG,KAAKE,SAAS,CAAEJ,OAAQD,QAb5B,GAA4BM,aCwCbC,G,MAtCf,kDAEI,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDS,QAAU,GAFA,EAFvB,yDAOiBC,EAAGC,GACK,OAAbA,GACAP,KAAKK,QAAQG,OAAOF,GACxBN,KAAKK,QAAQC,GAAKC,IAV1B,+BAac,IAAD,OACLP,KAAKK,QAAQI,OAAS,EACtB,IAAIJ,EAAU,GAKd,OAJA,YAAIL,KAAKJ,MAAMc,MAAMC,SAAQ,SAACC,EAAMC,GAChCR,EAAQS,KAAK,kBAAC,EAAD,CAAQC,IAAK,EAAKC,aAAaC,KAAK,EAAMJ,GAAQK,IAAKL,EAAOZ,OAAQW,QAInF,yBAAKb,UAAU,mCAAmCM,KArB9D,sCAyBoBC,EAAGT,GACfG,KAAKK,QAAQC,GAAGa,UAAUtB,KA1BlC,uCA8BQG,KAAKK,QAAQM,SAAQ,SAAAS,GAAC,OAAIA,EAAED,WAAU,QA9B9C,uCAkCQnB,KAAKK,QAAQM,SAAQ,SAAAS,GAAC,OAAIA,EAAED,WAAU,UAlC9C,GAA0BhB,c,OCeXkB,G,MAff,uKAEQ,OACI,6BACI,0BAAMtB,UAAU,aAGRC,KAAKJ,MAAM0B,MAAMC,KAAI,SAACC,EAAMlB,GAAP,OAAa,uBAAGY,IAAKZ,EAAGP,UAAU,0BAA0ByB,YAPzG,GAA8BrB,cCcfsB,EAXf,uKAGQ,OACI,yBAAKC,MAAO,CAAEC,SAAU,QACpB,kBAAC,EAAD,CAAUL,MAAOM,IAAOA,IAAOnB,OAAST,KAAKJ,MAAMiC,MAAQ,UAL3E,GAA6B1B,aCUd2B,G,YAVf,uKAEQ,OACI,yBAAK/B,UAAU,cACX,kBAAC,EAAD,CAAUuB,MAAOS,WAJjC,GAA8B5B,cCUf6B,EAVf,uKAEQ,OACI,yBAAKjC,UAAU,cACX,kBAAC,EAAD,CAAUuB,MAAOW,WAJjC,GAAyB9B,aCUV+B,EAVf,uKAEQ,OACI,yBAAKnC,UAAU,kBACX,kBAAC,EAAD,CAAUuB,MAAOa,WAJjC,GAA2BhC,a,gCC0CZiC,EA5Cf,kDAEI,WAAYxC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CAACwC,gBAAiB,IAHhB,EAFvB,qDAQc,IAAD,OACL,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KAEQ,CAAC,aAAc,gBAAc,WAAWjB,KACpC,SAAAkB,GAAG,OAAI,kBAACC,EAAA,EAAD,CAAK3C,UAAU,yBAAyBmB,IAAKuB,GAE5C,YAAIA,GAAKlB,KAAI,SAAAH,GAAC,OAAI,kBAACuB,EAAA,EAAD,CAAQC,SAAU,EAAK/C,MAAMwC,gBAAgBQ,SAASzB,GAAI0B,QAAS,kBAAM,EAAKlD,MAAMmD,aAAa3B,IAAIrB,UAAU,aAAamB,IAAKE,GAAIA,eAjB/L,iCA6BeA,GACPpB,KAAKH,MAAMwC,gBAAgBvB,KAAKM,GAChCpB,KAAKE,SAAS,MA/BtB,gCAkCckB,GACNpB,KAAKH,MAAMwC,gBAAgBW,OAAO5B,GAClCpB,KAAKE,SAAS,MApCtB,gCAuCckB,GACNpB,KAAKE,SAAS,CAACmC,gBAAiB,SAxCxC,GAA8BlC,aCMvB,IAkDQ8C,EAlDf,WACI,WAAYvC,GAAO,oBACfV,KAAK6B,MAbC,EAeN7B,KAAKU,KAAOA,EAAKwC,cACjBlD,KAAKmD,QAdb,SAAyBC,EAAKC,EAASC,GAGnC,IADA,IAAIC,EAAS,GACJjD,EAAI,EAAGA,EAAI8C,EAAI3C,OAAQH,IAC5BiD,GAAUF,EAAQR,SAASO,EAAI9C,IAAMgD,EAAMD,EAAQG,QAAQJ,EAAI9C,KAAO8C,EAAI9C,GAE9E,OAAOiD,EAQYE,CAAgBzD,KAAKU,KAAM,2CAAc,cAExDV,KAAK0D,YAAc,GACnB1D,KAAK2D,cAAgB,GACrB,IAAK,IAAIrD,EAAI,EAAGA,EAAII,EAAKD,OAAQH,IAC7BN,KAAK2D,cAAc7C,MAAK,GAVpC,yDAciBb,GACT,IAAI2D,EAAU,GAEd,IAAK5D,KAAK0D,YAAYb,SAAS5C,GAAS,CACpCD,KAAK0D,YAAY5C,KAAKb,GAEtB,IAAK,IAAIK,EAAI,EAAGA,EAAIN,KAAKU,KAAKD,OAAQH,IAC9BN,KAAKmD,QAAQ7C,KAAOL,IACpB2D,EAAQ9C,KAAKR,GACbN,KAAK2D,cAAcrD,IAAK,GAIT,IAAnBsD,EAAQnD,QACRT,KAAK6B,QAIb,OAAO+B,IAhCf,gCAoCQ,OAAsB,IAAf5D,KAAK6B,QApCpB,+BAwCQ,OAAO7B,KAAK2D,cAAcE,OAAM,SAAAC,GAAC,OAAKA,OAxC9C,mCA2CkB,IAAD,OACT,OAAO9D,KAAKU,KAAKa,KAAI,SAACH,EAAGd,GAAJ,OAAU,EAAKqD,cAAcrD,GAAK,IAAMc,SA5CrE,KCyFe2C,EAtFf,kDACE,WAAYnE,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEmE,SAAS,EAAOC,KAAM,MAFpB,EADrB,gEAMuB,IAAD,OAClBjE,KAAKkE,YAAYC,MAAK,kBAAM,EAAKC,eAPrC,wKAWyBC,MAAM,eAAgB,CACzCC,OAAQ,MACRC,QAAS,CACP,eAAgB,iCAdxB,cAWQC,EAXR,gBAkBuBA,EAASC,cAlBhC,OAkBQC,EAlBR,OAoBQC,EAAU,IAAIC,YAAY,cAC1BC,EAAOF,EAAQG,OAAOJ,GAE1B1E,KAAK+E,MAAQF,EAAKG,MAAM,MAvB5B,sIA0Ba,IAAD,OACJtE,EAAOV,KAAK+E,MAAME,KAAKC,MAAMD,KAAKE,SAAWnF,KAAK+E,MAAMtE,SACxDwD,EAAO,IAAIhB,EAAQvC,GACvBV,KAAKE,SAAS,CAAE8D,SAAS,EAAMC,SAAQ,WAAO,EAAKmB,SAASC,YAAY,EAAK3E,KAAK4E,sBA7BtF,sCAgCkBC,GAAI,IAAD,OACjBvF,KAAKoF,SAASI,WAAWD,GACXvF,KAAKH,MAAMoE,KAAKwB,aAAaF,GAEnC5E,SAAQ,SAACL,GACf,EAAKI,KAAKgF,gBAAgBpF,GAAG,MAE/B,IAAIqF,EAAO3F,KAAKH,MAAMoE,KAAK2B,UACvBC,EAAM7F,KAAKH,MAAMoE,KAAK6B,SACtBH,GAAQE,GACV7F,KAAKU,KAAKqF,iBACV/F,KAAKE,SAAS,CAAE8D,SAAS,IACzBhE,KAAKE,SAAS,CAAE2F,MAAKF,UAErB3F,KAAKE,SAAS,MA9CpB,+BAkDY,IAAD,OACP,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAEdC,KAAKH,MAAMmE,QACP,kBAAC,EAAD,MACAhE,KAAKH,MAAMgG,IACT,kBAAC,EAAD,MACA,kBAAC,EAAD,MAIc,OAApB7F,KAAKH,MAAMoE,KACT,0CAEA,kBAACvB,EAAA,EAAD,KACE,kBAAC,EAAD,CAASb,MAAO7B,KAAKH,MAAMoE,KAAKpC,QAChC,kBAACW,EAAA,EAAD,CAAKzC,UAAU,qBACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAMgB,IAAK,SAACR,GAAe,EAAKG,KAAOH,GAAaG,KAAMV,KAAKH,MAAMoE,KAAKvD,QAG1EV,KAAKH,MAAMmE,QACP,kBAAC,EAAD,CAAUjD,IAAK,SAACR,GAAD,OAAc,EAAK6E,SAAW7E,GAAUwC,aAAc/C,KAAKgG,gBAAgB/E,KAAKjB,QAC/F,kBAAC2C,EAAA,EAAD,CAAQ5C,UAAU,MAAM+C,QAAS,WAAQ,EAAKsB,YAA9C,mBA3ExB,GAAyBjE,aCFL8F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2bcbe32f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class Letter extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {hidden: true};\n  }\n\n  render() {\n    //return <div className=\"letter p-2\">{this.state.hidden ? this.props.letter.toLowerCase() : this.props.letter}</div>;\n    return <div className=\"letter p-2\">{this.state.hidden ? '_' : this.props.letter}</div>;\n  }\n\n  setHidden(state) {\n    this.setState({ hidden: state });\n  }\n}\n\nexport default Letter;\n","import React, { Component } from 'react'\nimport Letter from './Letter';\nimport './Word.css';\n\nexport class Word extends Component {\n\n    constructor(props) {\n        super(props);\n        this.letters = [];\n    }\n\n    setLetterRef(i, instance) {\n        if (instance === null)\n            this.letters.splice(i);\n        this.letters[i] = instance;\n    }\n    \n    render() {\n        this.letters.length = 0;\n        var letters = [];\n        [...this.props.word].forEach((char, index) => {\n            letters.push(<Letter ref={this.setLetterRef.bind(this, index)} key={index} letter={char}/>);\n        });\n\n        return (\n            <div className='word justify-content-center m-3'>{letters}</div>\n        )\n    }\n\n    setLetterHidden(i, state) {\n        this.letters[i].setHidden(state);\n    }\n\n    showAllLetters() {\n        this.letters.forEach(l => l.setHidden(false));\n    }\n\n    hideAllLetters() {\n        this.letters.forEach(l => l.setHidden(true));\n    }\n}\n\nexport default Word\n","import React, { Component } from 'react'\n\nimport \"./AsciiBox.css\";\n\nexport class AsciiBox extends Component {\n    render() {\n        return (\n            <div>\n                <code className=\"ascii-box\">\n                    {\n                        //this.props.lines.join('\\n')\n                        this.props.lines.map((line, i) => <p key={i} className=\"m-0 p-0 ascii-box-line\">{line}</p>)\n                    }\n                </code>\n            </div>\n        )\n    }\n}\n\nexport default AsciiBox\n","import React, { Component } from 'react';\nimport { graphs } from './Hangman.json';\n\nimport AsciiBox from './AsciiBox';\n\n\n\nexport class Hangman extends Component {\n\n    render() {\n        return (\n            <div style={{ fontSize: '2em' }}>\n                <AsciiBox lines={graphs[graphs.length - this.props.lives - 1]}/>\n            </div>\n        )\n    }\n}\n\nexport default Hangman;\n","import React, { Component } from 'react';\nimport AsciiBox from './AsciiBox';\n\nimport { game_over } from './Hangman.json';\n\nimport './Titles.css';\n\nexport class GameOver extends Component {\n    render() {\n        return (\n            <div className='small-font'>\n                <AsciiBox lines={game_over} />\n            </div>\n        )\n    }\n}\n\nexport default GameOver;\n","import React, { Component } from 'react'\nimport AsciiBox from './AsciiBox';\n\nimport { game_win } from './Hangman.json';\n\nimport './Titles.css';\n\nexport class Win extends Component {\n    render() {\n        return (\n            <div className='small-font'>\n                <AsciiBox lines={game_win} />\n            </div>\n        )\n    }\n}\n\nexport default Win;\n","import React, { Component } from 'react'\nimport AsciiBox from './AsciiBox';\n\nimport { title } from './Hangman.json';\n\nimport './Titles.css';\n\nexport class Title extends Component {\n    render() {\n        return (\n            <div className='small-font p-5'>\n                <AsciiBox lines={title} />\n            </div>\n        )\n    }\n}\n\nexport default Title;\n","import React, { Component } from 'react';\n\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\n\nexport class Keyboard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {disabledButtons: []};\n    }\n\n    render() {\n        return (\n            <div>\n                <Container fluid>\n                    <Col>\n                        {\n                            [\"QWERTYUIOP\", \"ASDFGHJKLÑ\", \"ZXCVBNM\"].map(\n                                row => <Row className=\"justify-content-center\" key={row}>\n                                    {\n                                        [...row].map(l => <Button disabled={this.state.disabledButtons.includes(l)} onClick={() => this.props.onKeyPressed(l)} className=\"m-1 btn-lg\" key={l}>{l}</Button>)\n                                    }\n                                </Row>\n                            )\n\n                        }\n                    </Col>\n                </Container>\n            </div >\n        )\n    }\n\n    disableKey(l) {\n        this.state.disabledButtons.push(l);\n        this.setState({});\n    }\n\n    enableKey(l) {\n        this.state.disabledButtons.remove(l);\n        this.setState({});\n    }\n\n    enableAll(l) {\n        this.setState({disabledButtons: []});\n    }\n}\n\nexport default Keyboard;\n","const TRIES = 6;\n\nfunction stringTranslate(str, setFrom, setTo) {\n\n    var newStr = '';\n    for (var i = 0; i < str.length; i++) {\n        newStr += setFrom.includes(str[i]) ? setTo[setFrom.indexOf(str[i])] : str[i];\n    }\n    return newStr;\n}\n\nexport class OneGame {\n    constructor(word) {\n        this.lives = TRIES;\n\n        this.word = word.toUpperCase();\n        this.rawWord = stringTranslate(this.word, 'ÁÉÍÓÚÄËÏÖÜ', 'AEIOUAEIOU');\n\n        this.usedLetters = [];\n        this.hiddenLetters = [];\n        for (var i = 0; i < word.length; i++) {\n            this.hiddenLetters.push(true);\n        }\n    }\n\n    revealLetter(letter) {\n        let indices = [];\n\n        if (!this.usedLetters.includes(letter)) {\n            this.usedLetters.push(letter);\n\n            for (var i = 0; i < this.word.length; i++) {\n                if (this.rawWord[i] === letter) {\n                    indices.push(i);\n                    this.hiddenLetters[i] = false;\n                }\n            }\n\n            if (indices.length === 0) {\n                this.lives--;\n            }\n        }\n\n        return indices;\n    }\n\n    didLose() {\n        return this.lives === 0;\n    }\n\n    didWin() {\n        return this.hiddenLetters.every(h => !h);\n    }\n\n    getLetters() {\n        return this.word.map((l, i) => this.hiddenLetters[i] ? '_' : l);\n    }\n\n}\n\n\nexport default OneGame;","import React, { Component } from \"react\";\n\nimport Word from \"./components/Word\";\nimport Hangman from \"./components/Hangman\";\n\nimport \"./App.css\";\nimport GameOver from \"./components/GameOver\";\nimport Win from \"./components/Win\";\nimport Title from \"./components/Title\";\n\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport Keyboard from \"./components/Keyboard\";\nimport OneGame from \"./OneGame\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { playing: false, game: null };\n  }\n\n  componentDidMount() {\n    this.loadWords().then(() => this.newGame());\n  }\n\n  async loadWords() {\n    var response = await fetch(\"/words_2.txt\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"text/plain; charset=latin-1\",\n      },\n    });\n\n    let buffer = await response.arrayBuffer();\n\n    let decoder = new TextDecoder(\"iso-8859-1\");\n    let text = decoder.decode(buffer);\n\n    this.words = text.split('\\n');\n  }\n\n  newGame() {\n    let word = this.words[Math.floor(Math.random() * this.words.length)];\n    let game = new OneGame(word);\n    this.setState({ playing: true, game }, () => {this.keyboard.enableAll();this.word.hideAllLetters();});\n  }\n\n  keyboardPressed(k) {\n    this.keyboard.disableKey(k);\n    let indices = this.state.game.revealLetter(k);\n    \n    indices.forEach((i) => {\n      this.word.setLetterHidden(i, false);\n    });\n    let lose = this.state.game.didLose();\n    let win = this.state.game.didWin();\n    if (lose || win) {\n      this.word.showAllLetters();\n      this.setState({ playing: false });\n      this.setState({ win, lose });\n    } else {\n      this.setState({});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {\n            this.state.playing\n              ? <Title />\n              : this.state.win\n                ? <Win />\n                : <GameOver />\n\n          }\n          {\n            this.state.game === null ?\n              <h1>Loading...</h1>\n              :\n              <Row >\n                <Hangman lives={this.state.game.lives} />\n                <Col className=\"align-self-center\">\n                  <div className=\"align-self-center\">\n                    <Word ref={(instance) => { this.word = instance; }} word={this.state.game.word} />\n                  </div>\n                  {\n                    this.state.playing\n                      ? <Keyboard ref={(instance) => this.keyboard = instance} onKeyPressed={this.keyboardPressed.bind(this)} />\n                      : <Button className=\"m-3\" onClick={() => { this.newGame(); }}>Restart</Button>\n                  }\n                </Col>\n              </Row>\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}