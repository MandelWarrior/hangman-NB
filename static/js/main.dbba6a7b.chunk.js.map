{"version":3,"sources":["components/Words.js","components/AsciiBox.js","components/Hangman.js","components/GameOver.js","components/Win.js","components/Title.js","components/Keyboard.js","CharacterRevealer.js","MultiWordGame.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Words","props","style","color","Row","words","split","map","word","i","key","className","whiteSpace","l","fontSize","AsciiBox","this","lines","line","Component","Hangman","graphs","length","lives","GameOver","game_over","Win","game_win","Title","title","Keyboard","state","disabledButtons","Container","fluid","Col","keyRows","row","toUpperCase","Button","disabled","includes","onClick","onKeyPressed","push","setState","remove","CharacterRevealer","characterTranslation","rawWord","str","setFrom","setTo","newStr","indexOf","stringTranslate","from","to","hiddenLetters","letter","indices","every","h","join","MultiWordGame","translator","wordGames","w","revealed","forEach","revealLetter","loseLife","g","isComplete","setWin","keyboardLetters","wordIndices","getLetters","reset","win","App","playing","game","selectedWordList","WordLists","reloadGame","loadWords","catch","e","alert","then","newGame","Languages","find","name","language","fetch","process","file","method","headers","response","ok","wordSet","Error","text","filter","wordList","phrase","Math","floor","random","getCurrentLanguage","characterSubstitution","keyboard","enableAll","revealUnusableLetters","keyboardRows","k","disableKey","lose","didLose","didWin","Navbar","fixed","bg","Collapse","NavDropdown","Item","onChangeLanguage","left","getRawLetters","ref","instance","keyboardPressed","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.dbba6a7b.chunk.js","sourcesContent":["import React from 'react'\nimport { Row } from 'react-bootstrap';\n\n\nexport default function Words(props) {\n    return (\n        <code style={{ color: 'white' }}>\n            <Row>\n                {\n                    props.words.split(' ').map((word, i) =>\n                        <Row key={i} className='m-3' style={{ whiteSpace: 'nowrap' }}>\n                            {\n                                [...word].map((l, i) => <div key={i}  className=\"m-1\" style={{ fontSize: '200%' }}>{l}</div>)\n                            }\n                        </Row>\n                    )\n                }\n            </Row>\n        </code>\n    )\n}\n","import React, { Component } from 'react'\n\nimport \"./AsciiBox.css\";\n\nexport class AsciiBox extends Component {\n    render() {\n        return (\n            <div>\n                <code className=\"ascii-box\">\n                    {\n                        //this.props.lines.join('\\n')\n                        this.props.lines.map((line, i) => <p key={i} className=\"m-0 p-0 ascii-box-line\">{line}</p>)\n                    }\n                </code>\n            </div>\n        )\n    }\n}\n\nexport default AsciiBox\n","import React, { Component } from 'react';\nimport { graphs } from './Hangman.json';\n\nimport AsciiBox from './AsciiBox';\n\n\n\nexport class Hangman extends Component {\n\n    render() {\n        return (\n            <div style={{ fontSize: '2em' }}>\n                <AsciiBox lines={graphs[graphs.length - this.props.lives - 1]}/>\n            </div>\n        )\n    }\n}\n\nexport default Hangman;\n","import React, { Component } from 'react';\nimport AsciiBox from './AsciiBox';\n\nimport { game_over } from './Hangman.json';\n\nimport './Titles.css';\n\nexport class GameOver extends Component {\n    render() {\n        return (\n            <div className='small-font'>\n                <AsciiBox lines={game_over} />\n            </div>\n        )\n    }\n}\n\nexport default GameOver;\n","import React, { Component } from 'react'\nimport AsciiBox from './AsciiBox';\n\nimport { game_win } from './Hangman.json';\n\nimport './Titles.css';\n\nexport class Win extends Component {\n    render() {\n        return (\n            <div className='small-font'>\n                <AsciiBox lines={game_win} />\n            </div>\n        )\n    }\n}\n\nexport default Win;\n","import React, { Component } from 'react'\nimport AsciiBox from './AsciiBox';\n\nimport { title } from './Hangman.json';\n\nimport './Titles.css';\n\nexport class Title extends Component {\n    render() {\n        return (\n            <div className='small-font p-5'>\n                <AsciiBox lines={title} />\n            </div>\n        )\n    }\n}\n\nexport default Title;\n","import React, { Component } from 'react';\n\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nimport './Keyboard.css';\n\nexport class Keyboard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { disabledButtons: [] };\n    }\n\n    render() {\n        return (\n            <div>\n                <Container fluid>\n                    <Col>\n                        {\n                            this.props.keyRows.map(row => row.toUpperCase()).map(\n                                row => <Row className=\"justify-content-center flex-nowrap\" key={row}>\n                                    {\n                                        [...row].map(l => <Button disabled={this.state.disabledButtons.includes(l)} onClick={() => this.props.onKeyPressed(l)} className=\"m-1 btn-lg\" key={l}>{l}</Button>)\n                                    }\n                                </Row>\n                            )\n\n                        }\n                    </Col>\n                </Container>\n            </div >\n        )\n    }\n\n    disableKey(l) {\n        this.state.disabledButtons.push(l);\n        this.setState({});\n    }\n\n    enableKey(l) {\n        this.state.disabledButtons.remove(l);\n        this.setState({});\n    }\n\n    enableAll(l) {\n        this.setState({ disabledButtons: [] });\n    }\n}\n\nexport default Keyboard;\n","\nfunction stringTranslate(str, setFrom, setTo) {\n\n    var newStr = '';\n    for (var i = 0; i < str.length; i++) {\n        newStr += setFrom.includes(str[i]) ? setTo[setFrom.indexOf(str[i])] : str[i];\n    }\n    return newStr;\n}\n\nexport class CharacterRevealer {\n    constructor(word, characterTranslation) {\n        this.word = word.toUpperCase();\n        if (characterTranslation != null) {\n            this.rawWord = stringTranslate(this.word, characterTranslation.from, characterTranslation.to);\n        } else {\n            this.rawWord = this.word;\n        }\n\n        this.hiddenLetters = [];\n        for (var i = 0; i < word.length; i++) {\n            this.hiddenLetters.push(true);\n        }\n    }\n\n    revealLetter(letter) {\n        let indices = [];\n\n        for (var i = 0; i < this.word.length; i++) {\n            if (this.rawWord[i] === letter) {\n                indices.push(i);\n                this.hiddenLetters[i] = false;\n            }\n        }\n\n        return indices;\n    }\n\n    isComplete() {\n        return this.hiddenLetters.every(h => !h);\n    }\n\n    getLetters() {\n        return [...this.word].map((l, i) => this.hiddenLetters[i] ? '_' : l).join('');\n    }\n}\n\n\nexport default CharacterRevealer;","import CharacterRevealer from './CharacterRevealer.js';\nimport Game from './Game.js';\n\n\nexport class MultiWordGame extends Game {\n\n    constructor(words, translator) {\n        super();\n        this.wordGames = words.map(w => new CharacterRevealer(w, translator));\n    }\n\n    revealLetter(letter) {\n        let revealed = [];\n        this.wordGames.forEach(word => {\n            revealed.push(word.revealLetter(letter));\n        });\n        if (revealed.every(i => i.length === 0)) {\n            this.loseLife();\n        }\n        if (this.wordGames.every(g => g.isComplete())) {\n            this.setWin();\n        }\n        return revealed;\n    }\n\n    getWords() {\n        return this.wordGames.map(w => w.word);\n    }\n\n    revealUnusableLetters(keyboardLetters) {\n        let revealed = [];\n        this.wordGames.forEach(word => {\n            let wordIndices = [];\n            [...word.rawWord].forEach(l => {\n                if (!keyboardLetters.includes(l)) {\n                    wordIndices.push(...word.revealLetter(l));\n                }\n            });\n            revealed.push(wordIndices);\n        });\n        return revealed;\n    }\n\n    getLetters() {\n        return this.wordGames.map(w => w.getLetters()).join(' ');\n    }\n\n    getRawLetters() {\n        return this.wordGames.map(w => w.rawWord).join(' ');\n    }\n}\n\nexport default MultiWordGame;","\n\nexport class Game {\n    constructor() {\n        this.reset();\n    }\n\n    loseLife() {\n        this.lives--;\n    }\n    setWin() {\n        this.win = true;\n    }\n\n    didLose() {\n        return this.lives === 0;\n    }\n    didWin() {\n        return this.win;\n    };\n\n    reset() {\n        this.win = false;\n        this.lives = 6;\n    }\n}\n\nexport default Game;","import React, { Component } from \"react\";\n\nimport Words from \"./components/Words\";\nimport Hangman from \"./components/Hangman\";\n\nimport \"./App.css\";\nimport GameOver from \"./components/GameOver\";\nimport Win from \"./components/Win\";\nimport Title from \"./components/Title\";\n\nimport { Button, Row, Navbar, NavDropdown, Container } from \"react-bootstrap\";\nimport Keyboard from \"./components/Keyboard\";\nimport MultiWordGame from \"./MultiWordGame\";\n\nimport WordLists from \"./WordLists.json\";\nimport Languages from \"./Languages.json\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { playing: false, game: null, selectedWordList: WordLists[0] };\n  }\n\n  componentDidMount() {\n    this.reloadGame();\n  }\n\n  reloadGame() {\n    this.loadWords()\n      .catch((e) => alert(e))\n      .then(() => this.newGame());\n  }\n\n  getCurrentLanguage() {\n    return Languages.find(l => l.name === this.state.selectedWordList.language);\n  }\n\n\n  async loadWords() {\n    var response = await fetch(process.env.PUBLIC_URL + \"/\" + this.state.selectedWordList.file, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"text/plain\",\n      },\n    });\n\n    if (!response.ok) {\n      this.wordSet = null;\n      throw new Error('Error fetching Word List!');\n    }\n\n    let text = await response.text();\n\n    this.wordSet = text.split('\\n').filter(w => w.length > 0);\n  }\n\n  onChangeLanguage(wordList) {\n    this.setState({ game: null, selectedWordList: wordList },\n      () => {\n        this.reloadGame();\n      }\n    );\n  }\n\n  newGame() {\n    let phrase = this.wordSet[Math.floor(Math.random() * this.wordSet.length)];\n    let game = new MultiWordGame(phrase.split(' '), this.getCurrentLanguage().characterSubstitution);\n    this.setState({ playing: true, game }, () => {\n      this.keyboard.enableAll();\n      this.state.game.revealUnusableLetters(this.getCurrentLanguage().keyboardRows.join(''));\n      this.setState({});\n    });\n  }\n\n  keyboardPressed(k) {\n    this.keyboard.disableKey(k);\n    this.state.game.revealLetter(k);\n\n    let lose = this.state.game.didLose();\n    let win = this.state.game.didWin();\n    if (lose || win) {\n      this.setState({ playing: false, win, lose });\n    } else {\n      this.setState({});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar fixed=\"top\" bg=\"dark\">\n          <Navbar.Collapse>\n            <NavDropdown title=\"Language\">\n              {\n                WordLists.map(l => <NavDropdown.Item key={l.name} onClick={() => this.onChangeLanguage(l)}>{l.name}</NavDropdown.Item>)\n              }\n            </NavDropdown>\n          </Navbar.Collapse>\n        </Navbar>\n        <header className=\"App-header\">\n          {\n            this.state.playing\n              ? <Title />\n              : this.state.win\n                ? <Win />\n                : <GameOver />\n          }\n          {\n            this.state.game === null ?\n              <h1>Loading...</h1>\n              :\n              <Row className='justify-content-center'>\n                <div style={{ left: '5%' }}>\n                  <Hangman lives={this.state.game.lives} />\n                </div>\n                <Container className='justify-content-center'>\n\n                  <Row>\n                    <Words words={this.state.playing ? this.state.game.getLetters() : this.state.game.getRawLetters()} />\n                  </Row>\n                  <Row>\n                    {\n                      this.state.playing\n                        ? <Keyboard\n                          keyRows={Languages.find(l => l.name === this.state.selectedWordList.language).keyboardRows}\n                          ref={(instance) => this.keyboard = instance}\n                          onKeyPressed={this.keyboardPressed.bind(this)}\n                        />\n                        : <Button className=\"m-3\" onClick={() => { this.newGame(); }}>Restart</Button>\n                    }\n                  </Row>\n                </Container>\n              </Row>\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <BrowserRouter basename={'/hangman-NB'}>\n      <Route path=\"/\" component={App} />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}